/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse38.view;

import edu.ijse.gdse38.chatObserverImpl.ChatObserverImpl;
import edu.ijse.gdse38.connector.ChatConnector;
import edu.ijse.gdse38.controller.ChatController;
import edu.ijse.gdse38.observer.ChatObserver;
import edu.ijse.gdse38.sounds.MakeSound;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author SW96
 */
public class PrivateChatWindow extends javax.swing.JFrame {

    /**
     * Creates new form PrivateChatWindow
     */
    private String sender;
    private String reciepent;
    private ChatObserver chatObserver;
    MakeSound makeSound;
    private File file;
    private String newTime;
    private String newDate;

    public PrivateChatWindow(String sender, String reciepent) {
        try {
            initComponents();

            chatObserver = new ChatObserverImpl(this);
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.addPrivateChatObserver(chatObserver, sender);
            this.sender = sender;
            this.reciepent = reciepent;
            nameLabel.setText(reciepent);
            this.makeSound = new MakeSound();
            historyLoad(sender, reciepent);
            date();
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        chatPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        attachmentLabel = new javax.swing.JLabel();
        messageText = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bakLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chatPanel.setOpaque(false);
        chatPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        chatArea.setAlignmentX(0.0F);
        chatArea.setAlignmentY(0.0F);
        jScrollPane1.setViewportView(chatArea);

        chatPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 300));

        mainPanel.add(chatPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 300, 310));

        attachmentLabel.setBackground(new java.awt.Color(255, 255, 255));
        attachmentLabel.setForeground(new java.awt.Color(255, 255, 255));
        attachmentLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/attach.png"))); // NOI18N
        attachmentLabel.setText("Attachments");
        attachmentLabel.setToolTipText("Attach a File");
        attachmentLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attachmentLabelMouseClicked(evt);
            }
        });
        mainPanel.add(attachmentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 120, 30));

        messageText.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        messageText.setText("Type Text Here ...");
        messageText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                messageTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                messageTextFocusLost(evt);
            }
        });
        messageText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextActionPerformed(evt);
            }
        });
        messageText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                messageTextKeyTyped(evt);
            }
        });
        mainPanel.add(messageText, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 300, 40));

        nameLabel.setFont(new java.awt.Font("Times New Roman", 2, 13)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(51, 204, 0));
        mainPanel.add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 150, 30));

        closeButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/close.png"))); // NOI18N
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });
        mainPanel.add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 30, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/for.png"))); // NOI18N
        jLabel1.setText("Send");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        mainPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 330, 70, 30));

        bakLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/privateWindow.png"))); // NOI18N
        bakLabel.setOpaque(true);
        mainPanel.add(bakLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 400));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 400));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void messageTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextActionPerformed
        try {
            time();
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.sendMessage("PRIVATE", messageText.getText() + "\n\t\t\t" + newTime, sender, reciepent);
            chatController.storeHistory(sender, reciepent, messageText.getText());
            messageText.setText(null);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            JOptionPane.showMessageDialog(this, "Server is Offline");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Server is Offline");
        }
    }//GEN-LAST:event_messageTextActionPerformed

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.remPrivateChatObserver(chatObserver, sender);
            chatController.sendMessage("PRIVATE", "LEFT", sender, reciepent);
            this.dispose();
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_closeButtonMouseClicked

    private void messageTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageTextFocusGained
        messageText.setText(null);
    }//GEN-LAST:event_messageTextFocusGained

    private void messageTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageTextFocusLost
        messageText.setText("Type Text  Here ...");
    }//GEN-LAST:event_messageTextFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.sendMessage("PRIVATE", "LEFT", sender, reciepent);
            chatController.remPrivateChatObserver(chatObserver, sender);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void messageTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextKeyTyped

    }//GEN-LAST:event_messageTextKeyTyped

    private void attachmentLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attachmentLabelMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showDialog(this, "Select File");
        file = fileChooser.getSelectedFile();
        long size = file.length();
        if (size < 120 * 1024 * 1024) {
            if (file != null) {
                if (!file.getName().isEmpty()) {
                    String str;

                    if (messageText.getText().length() > 30) {
                        String t = file.getPath();
                        str = t.substring(0, 20) + " [...] " + t.substring(t.length() - 20, t.length());
                    } else {
                        str = file.getPath();
                    }
                    messageText.setText(str);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sorry !! File Size is too Large !!");
        }
    }//GEN-LAST:event_attachmentLabelMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        sendFile();
        messageText.setText(null);
    }//GEN-LAST:event_jLabel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrivateChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrivateChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrivateChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrivateChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrivateChatWindow("Sanda", "S").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attachmentLabel;
    private javax.swing.JLabel bakLabel;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JLabel closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField messageText;
    private javax.swing.JLabel nameLabel;
    // End of variables declaration//GEN-END:variables

//    public void setMessage(String msgType, String message, String sender, String reciepent) {
//        if (this.reciepent.equals(sender) && this.sender.equals(reciepent)) {
//            chatArea.append(sender + " :: " + message + "\n");
//        }
//    }
    public void setMessage(String msgType, String message, String sender, String reciepent) {

        if (this.reciepent.equals(sender) && reciepent.equals(this.sender) && !message.equals("LEFT")) {
            makeSound.playSound("fb.wav");
            chatArea.append(sender + " : " + message + "\n");
        }
        if (this.sender.equals(sender) && reciepent.equals(this.reciepent)) {
            chatArea.append(sender + " : " + message + "\n");
        }

        if (this.sender.equals(reciepent) && message.equals("LEFT") && this.reciepent.equals(sender)) {
            chatArea.setForeground(Color.red);
            chatArea.append("\t" + sender + " Left Convesation !" + "\n");
        }
//        if (message.equals("LEFT")) {
//            chatArea.setForeground(Color.red);
//            chatArea.append("\t" + sender + " Left Convesation !" + "\n");
//        }
    }

    private void date() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        newDate = sdf.format(date);
        chatArea.append("\t  -- " + newDate + " --\n");
    }

    private void time() {
        SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");
        Date date = new Date();
        String newDate = time.format(date);
        newTime = time.format(date);
    }

    private void sendFile() {
        long size = file.length();
        boolean isSent = false;

        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            FileInputStream inputStream = new FileInputStream(file);
            byte[] mydata = new byte[1024 * 1024];
            int mylen = inputStream.read(mydata);
            while (mylen > 0) {
                isSent = chatController.sendDocument(sender, reciepent, file.getName(), mydata, mylen);
                mylen = inputStream.read(mydata);
            }
            System.out.println(isSent);
            if (isSent) {
                chatArea.append("File Sent !!");
                //JOptionPane.showMessageDialog(this, "Successfully Sent", "Delivery", 1);
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean recieveFile(String sender, String reciever, String filePath, byte[] data, int len) {
        boolean isRecieved = false;
        if (this.sender.equalsIgnoreCase(reciever)) {
            if (JOptionPane.showConfirmDialog(this, ("Accept this file from " + sender + " ?")) == 0) {
                FileOutputStream outputStream = null;
                try {
                    JFileChooser jf = new JFileChooser();
                    jf.setSelectedFile(new File(filePath));
                    int returnVal = jf.showSaveDialog(this);
                    String saveTo = jf.getSelectedFile().getPath();

                    File f = new File(saveTo);
                    f.createNewFile();
                    outputStream = new FileOutputStream(f, true);
                    outputStream.write(data, 0, len);
                    outputStream.flush();
                    outputStream.close();

                    isRecieved = true;
                    JOptionPane.showMessageDialog(this, "Sownload Complete !!", "Delivery", 1);

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        outputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        return isRecieved;
    }

    private void historyLoad(String sender, String reciepent) {
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            ArrayList<String> history = chatController.getHistory(sender, reciepent);
            for (String chat : history) {
                chatArea.append(chat);
            }
        } catch (IOException | NotBoundException ex) {
            Logger.getLogger(PrivateChatWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
