/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse38.view;

import edu.ijse.gdse38.chatObserverImpl.ChatObserverImpl;
import edu.ijse.gdse38.connector.ChatConnector;
import edu.ijse.gdse38.controller.ChatController;
import edu.ijse.gdse38.observer.ChatObserver;
import java.awt.Color;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author SW96
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private String userType;
    private String name;
    private ChatObserver chatObserver;
    private PrivateChatWindow privateChatWindow;
    private LinkedList<String> contactList;

    public MainWindow() {
        initComponents();
    }

    MainWindow(String userType, String name) {
        try {
            initComponents();
            chatObserver = new ChatObserverImpl(this);
            this.userType = userType;
            this.name = name;
            nameLabel.setText(name);
            giveAccess(userType);
            date();
        } catch (RemoteException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        remPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        remList = new javax.swing.JList();
        nameLabel = new javax.swing.JLabel();
        remMember = new javax.swing.JButton();
        messageText = new javax.swing.JTextField();
        attachmentLabel = new javax.swing.JLabel();
        sp1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        privatePanel = new javax.swing.JPanel();
        sp5 = new javax.swing.JScrollPane();
        privateChatList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        changePanel = new javax.swing.JPanel();
        sp3 = new javax.swing.JScrollPane();
        publicChatList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        pubOnlineButton = new javax.swing.JButton();
        beAMemberButton = new javax.swing.JButton();
        privateOnlineButton = new javax.swing.JButton();
        countpublicUserLabel = new javax.swing.JLabel();
        mainBackLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        remPanel.setOpaque(false);

        jScrollPane1.setOpaque(false);

        remList.setOpaque(false);
        remList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(remList);

        remPanel.add(jScrollPane1);

        mainPanel.add(remPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 110, 140));

        nameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mainPanel.add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 200, 30));

        remMember.setText("Remove Friend");
        remMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remMemberActionPerformed(evt);
            }
        });
        mainPanel.add(remMember, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, 30));

        messageText.setText("Type Text Here ...");
        messageText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51)));
        messageText.setOpaque(false);
        messageText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                messageTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                messageTextFocusLost(evt);
            }
        });
        messageText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextActionPerformed(evt);
            }
        });
        mainPanel.add(messageText, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, 630, 40));

        attachmentLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/attach.png"))); // NOI18N
        attachmentLabel.setToolTipText("Attach a File");
        mainPanel.add(attachmentLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 60, 20));

        sp1.setOpaque(false);

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        chatArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51), 2));
        sp1.setViewportView(chatArea);

        mainPanel.add(sp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 630, 340));

        privatePanel.setBackground(new java.awt.Color(255, 255, 255));
        privatePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51), 2));
        privatePanel.setOpaque(false);
        privatePanel.setLayout(null);

        sp5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51)));

        privateChatList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                privateChatListMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                privateChatListMouseEntered(evt);
            }
        });
        sp5.setViewportView(privateChatList);

        privatePanel.add(sp5);
        sp5.setBounds(0, 30, 180, 340);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Private List");
        jLabel1.setOpaque(true);
        privatePanel.add(jLabel1);
        jLabel1.setBounds(0, 0, 190, 30);

        mainPanel.add(privatePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 180, 370));

        changePanel.setBackground(new java.awt.Color(255, 255, 255));
        changePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51), 2));
        changePanel.setOpaque(false);
        changePanel.setLayout(null);

        sp3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 75, 51)));

        publicChatList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Public List" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        publicChatList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                publicChatListMouseClicked(evt);
            }
        });
        sp3.setViewportView(publicChatList);

        changePanel.add(sp3);
        sp3.setBounds(0, 30, 180, 340);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Public List");
        jLabel2.setOpaque(true);
        changePanel.add(jLabel2);
        jLabel2.setBounds(0, 0, 190, 30);

        mainPanel.add(changePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 180, 370));

        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });
        mainPanel.add(closeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 10, 30, 20));

        pubOnlineButton.setText("Public Online");
        pubOnlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pubOnlineButtonActionPerformed(evt);
            }
        });
        mainPanel.add(pubOnlineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 100, 30));

        beAMemberButton.setText("Be a Member");
        beAMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beAMemberButtonActionPerformed(evt);
            }
        });
        mainPanel.add(beAMemberButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 100, 30));

        privateOnlineButton.setText("Private List");
        privateOnlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privateOnlineButtonActionPerformed(evt);
            }
        });
        mainPanel.add(privateOnlineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 100, 30));

        countpublicUserLabel.setBackground(new java.awt.Color(0, 75, 51));
        countpublicUserLabel.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        countpublicUserLabel.setForeground(new java.awt.Color(255, 255, 255));
        countpublicUserLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        countpublicUserLabel.setOpaque(true);
        mainPanel.add(countpublicUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 180, 30));

        mainBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse38/images/mainwindowback.png"))); // NOI18N
        mainBackLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainBackLabelMouseClicked(evt);
            }
        });
        mainPanel.add(mainBackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 500));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 500));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void messageTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextActionPerformed
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.sendMessage(userType, messageText.getText(), name, "All");
            messageText.setText(null);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            JOptionPane.showMessageDialog(this, "Server is Offline");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Server is Offline");
        }
    }//GEN-LAST:event_messageTextActionPerformed

    private void messageTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageTextFocusGained
        messageText.setText(null);
    }//GEN-LAST:event_messageTextFocusGained

    private void messageTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageTextFocusLost

    }//GEN-LAST:event_messageTextFocusLost

    private void mainBackLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainBackLabelMouseClicked

    }//GEN-LAST:event_mainBackLabelMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.removeChatObserver(chatObserver, name);
            contactList.clear();
            System.out.println(contactList);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void publicChatListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_publicChatListMouseClicked
        String newInviteName = publicChatList.getSelectedValue().toString();
        int i = publicChatList.getSelectedIndex();
        publicChatList.setSelectionBackground(Color.black);
        if (userType.equalsIgnoreCase("Guest")) {
            if (!name.equals(newInviteName)) {
                int num = JOptionPane.showConfirmDialog(this, "Sorry !! You are Not a Member !! "
                        + "\nWant to be a Member", "Select Option", 2);
                if (num == 0) {
                    this.dispose();
                    new RegisterUser().setVisible(true);
                    try {
                        ChatController chatController = ChatConnector.getChatConnector().getChatController();
                        chatController.removeChatObserver(chatObserver, name);
                    } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        if (userType.equalsIgnoreCase("Member")) {
            if (!name.equals(newInviteName)) {
                try {
                    /**
                     * Check invite name in Member database
                     */
                    ChatController chatController = ChatConnector.getChatConnector().getChatController();
                    chatController.checkContact(name, newInviteName);
                    boolean ifHasContact = chatController.ifHasContacts();
                    boolean ifAMember = chatController.returnIfAMember(newInviteName, "");
                    if (ifHasContact && ifAMember) {
                        if (privateChatWindow == null) {
                            privateChatWindow = new PrivateChatWindow(name, newInviteName);
                            privateChatWindow.setVisible(true);
                        }
                        chatController.requestConfirmed(newInviteName, name);
                    } else {
                    }
                    chatController.checkMemberForRegister(newInviteName, "");
                    if (ifAMember && !ifHasContact) {
                        chatController.sendRequest(name, newInviteName);
                    }
                    if (!ifAMember) {
                        JOptionPane.showMessageDialog(this, "Sorry " + newInviteName + " is Not a Member Yet !!");
                    }
                } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_publicChatListMouseClicked

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        int num = JOptionPane.showConfirmDialog(this, "Want to Leave Chat Room ?", "Confirm", 1);
        if (num == 0) {
            try {
                ChatController chatController = ChatConnector.getChatConnector().getChatController();
                chatController.removeChatObserver(chatObserver, name);
                contactList.clear();
                System.out.println(contactList);
                System.exit(0);
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_closeLabelMouseClicked

    private void privateOnlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privateOnlineButtonActionPerformed
        privatePanel.setVisible(true);
        changePanel.setVisible(false);
    }//GEN-LAST:event_privateOnlineButtonActionPerformed

    private void beAMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beAMemberButtonActionPerformed
        new RegisterUser().setVisible(true);
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.removeChatObserver(chatObserver, name);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_beAMemberButtonActionPerformed

    private void privateChatListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateChatListMouseClicked
        try {
            String invited = privateChatList.getSelectedValue().toString();
            if (!invited.isEmpty()) {
                ChatController chatController = ChatConnector.getChatConnector().getChatController();
                String[] onlineSet = chatController.getOnlineList();
                int count = 0;
                if (onlineSet.length > 0) {
                    for (String online : onlineSet) {
                        if (online.equalsIgnoreCase(invited)) {
                            count++;
                            privateChatList.setSelectionForeground(Color.GREEN);
                            break;
                        }
                    }
                }
                /**
                 * online List Checked and open cat windows
                 */
                if (count > 0) {
                    if (privateChatWindow == null) {
                        privateChatWindow = new PrivateChatWindow(name, invited);
                        privateChatWindow.setVisible(true);
                    }
                    //new PrivateChatWindow(name, invited).setVisible(true);
                    chatController.requestConfirmed(invited, name);
                } else {
                    //JOptionPane.showMessageDialog(this, invited + " Not Available Now !!");
                    privateChatList.setSelectionForeground(Color.red);
                }
            }

        } catch (IOException | NotBoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_privateChatListMouseClicked

    private void privateChatListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_privateChatListMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_privateChatListMouseEntered

    private void pubOnlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pubOnlineButtonActionPerformed
        changePanel.setVisible(true);
        privatePanel.setVisible(false);
    }//GEN-LAST:event_pubOnlineButtonActionPerformed

    private void remMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remMemberActionPerformed
        if (remList.isVisible()) {
            remPanel.setVisible(false);
            remList.setVisible(false);

        } else {
            remPanel.setVisible(true);
            remList.setVisible(true);
            getPrivateChatContact(name);
        }
    }//GEN-LAST:event_remMemberActionPerformed

    private void remListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remListMouseClicked
        String itemName = remList.getSelectedValue().toString();
        int itemIntex = remList.getSelectedIndex();
        int num = JOptionPane.showConfirmDialog(this, "Are Ypu Sure to Remove " + itemName + " ?");
        if (num == 0) {
            try {
                remList.remove(itemIntex);
                ChatController chatController = ChatConnector.getChatConnector().getChatController();
                chatController.removeFriend(name, itemName);
                remPanel.setVisible(false);
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_remListMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel attachmentLabel;
    private javax.swing.JButton beAMemberButton;
    private javax.swing.JPanel changePanel;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JLabel closeLabel;
    public javax.swing.JLabel countpublicUserLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainBackLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField messageText;
    private javax.swing.JLabel nameLabel;
    public javax.swing.JList privateChatList;
    private javax.swing.JButton privateOnlineButton;
    private javax.swing.JPanel privatePanel;
    private javax.swing.JButton pubOnlineButton;
    public javax.swing.JList publicChatList;
    private javax.swing.JList remList;
    private javax.swing.JButton remMember;
    private javax.swing.JPanel remPanel;
    private javax.swing.JScrollPane sp1;
    private javax.swing.JScrollPane sp3;
    private javax.swing.JScrollPane sp5;
    // End of variables declaration//GEN-END:variables

    public void setMessage(String msgType, String message, String sender, String reciepent) {
        chatArea.append(sender + " : " + message + "\n");
    }

    private void giveAccess(String type) {
        try {
            if (type.equalsIgnoreCase("Guest")) {
                pubOnlineButton.setVisible(true);
                privateOnlineButton.setVisible(false);
                changePanel.setVisible(true);
                privatePanel.setVisible(false);
                remMember.setVisible(false);
                remList.setVisible(false);
                remPanel.setVisible(false);
            }
            if (type.equalsIgnoreCase("Member")) {
                beAMemberButton.setVisible(false);
                changePanel.setVisible(true);
                privatePanel.setVisible(false);
                getPrivateChatContact(name);
                remList.setVisible(false);
                remPanel.setVisible(false);
                remMember.setVisible(false);
            }

            ChatController chatController = ChatConnector.getChatConnector().getChatController();
            chatController.addChatObserver(chatObserver, name);

        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            JOptionPane.showMessageDialog(this, "Server is Offline");
        }

    }

    public void requests(String sender, String reciepent) {
        try {
            if (this.name.equals(reciepent)) {
                int confirm = JOptionPane.showConfirmDialog(this, "You have Invited to a Private Chat from " + sender + " "
                        + "\nWant to Accept ?", "Confirm", 0);
                if (confirm == 0) {
                    new PrivateChatWindow(reciepent, sender).setVisible(true);
                    ChatController chatController = ChatConnector.getChatConnector().getChatController();
                    chatController.requestConfirmed(sender, reciepent);
                    chatController.storeContacts(sender, reciepent);
                    getNewContact(sender);
                }
                if (confirm == 1) {
                    System.out.println("MAIN WINDOW 111 " + sender + " " + reciepent);
                    ChatController chatController = ChatConnector.getChatConnector().getChatController();
                    chatController.requestIgnored(sender, reciepent);
                }
            }
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void requestConfirmed(String sender, String reciepent) {
        if (this.name.equals(reciepent)) {
            try {
                ChatController chatController = ChatConnector.getChatConnector().getChatController();
                chatController.checkContact(sender, reciepent);
                boolean ifHasContact = chatController.ifHasContacts();
                if (ifHasContact) {
                    new PrivateChatWindow(reciepent, sender).setVisible(true);
                } else {
                    new PrivateChatWindow(reciepent, sender).setVisible(true);
                    getNewContact(sender);
                }
            } catch (IOException | NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void requestIgnored(String sender, String reciepent) {
        if (this.name.equals(sender)) {
            System.out.println("MAIN WINDOW 2222 " + sender + " " + reciepent);
            //JOptionPane.showMessageDialog(this, "Sorry " + reciepent + " Ignored Your Request !!", "Ignored", 0);
        }
    }

    private void date() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String newDate = sdf.format(date);
        chatArea.setText("\t\t\t   -- " + newDate + " --\n");
    }

    public void getPrivateChatContact(String owner) {
        try {
            ChatController chatController = ChatConnector.getChatConnector().getChatController();

            contactList = chatController.getContactList(owner);
            if (contactList != null) {
                String[] contacts = new String[contactList.size()];
                String[] toArray = contactList.toArray(contacts);
                //String[] onlineList = chatController.getOnlineList();
                for (int i = 0; i < toArray.length; i++) {
                    System.out.println(toArray[i] +"\n");
                    if (toArray[i].equalsIgnoreCase(owner)) {
                        toArray[i] = null;
                    }
                }
                boolean hasContacts = chatController.ifHasContacts();
                if (hasContacts) {
                    privateChatList.setListData(toArray);
                    contactList.clear();
                    System.out.println(contactList);
                }
            } else {
                System.out.println("No Data");
            }

        } catch (NotBoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getNewContact(String sender) {
        ListModel model = privateChatList.getModel();
        String[] temp = new String[model.getSize() + 1];
        int x = 0;
        for (int i = 0; i < model.getSize(); i++) {
            temp[i] = model.getElementAt(i).toString();
            x++;
        }
        temp[x] = sender;
        privateChatList.removeAll();
        privateChatList.setListData(temp);
    }

}
